worker_processes 1;
 
events { worker_connections 1024; }
 
http {
 
    sendfile on;
 
    upstream docker-nginx {
        server nginx:80;
    }
 
    upstream docker-apache {
        server apache:80;
    }
    # 2. Update the package paths
    include /etc/nginx/conf.d/*.conf;
    lua_package_path "./usr/queueit/?.lua;./usr/queueit/SDK/?.lua;./usr/queueit/Helpers/?/?.lua;;";

    server {
        listen 8080;
 
        location / {
            proxy_pass         http://docker-nginx;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
        }
    }
 
    server {
        listen 8081;
 
        location / {
            proxy_pass         http://docker-apache;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
            rewrite_by_lua_block {
                ngx.log(ngx.STDERR, 'this is a log string from lua')
                ngx.say('Hello,world!')
                local customerId = "texasmutual"
                local secretKey = "ab0bbf2b-9743-416a-9041-671b037eba7baceab5b3-f8f6-4b7e-adc2-5cab3aa154c8"
                -- Basic example where integration configuration file is loaded from disk.
                -- Please use this for testing / PoC etc., e.g. not on production environment.
                -- For production / final integration you need to decide where to store and load this file. 
                -- Could be a caching layer, environment variable, database ect.
                -- It's important that the selected option is fast, 
                -- not causing any performance bottlenecks because the file would be loaded on each request.
                local integrationConfigFilePath = "./usr/queueit/integrationconfig.json"
                local integrationConfigFile = io.open(integrationConfigFilePath, "rb")
                local integrationConfigJson = integrationConfigFile:read("*all")
                integrationConfigFile:close()

                local qit = require("KnownUserNginxHandler")

                -- If you want to enable secure or http only cookie settings then change options below.
                -- httpOnly: Only enable if you use pure server-side integration e.g. not JS Hybrid.
                -- secure: Only enable if your website runs purely on https.
                qit.setOptions({ httpOnly = false, secure = false })

                qit.handleByIntegrationConfig(customerId, secretKey, integrationConfigJson)
            }
        }
    }
}